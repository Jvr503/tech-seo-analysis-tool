'use client';

import React, { useMemo, useState, useEffect } from "react";
import { motion } from "framer-motion";
import { CheckSquare, FileDown, Filter, ListChecks, RefreshCw } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Switch } from "@/components/ui/switch";

// -------------------------------------------------------
// Tech SEO Analysis Tool (Template-backed, ready to host)
// Preloaded with the provided Analysis Checklist template.
// Includes a lightweight runtime test harness.
// -------------------------------------------------------

const IMPLEMENTER_OPTIONS = [
  "Developer",
  "Site Editor",
  "Client",
  "Client/Developer",
  "Propellic",
];

const ISSUE_CATEGORY_OPTIONS = [
  "1- Accessibility",
  "2- Page Speed",
  "3- Mobile Condition",
  "4- Content",
  "5- Social",
  "6- Link Issues",
  "7- Other",
  "8- Local Search",
];

// IMPORTANT: Radix/ shadcn Select.Item cannot have an empty-string value.
// Provide explicit choices and a special "_clear" control item when we want to clear.
const SCORE_OPTIONS = ["N/A", "1","2","3","4","5","6","7","8","9"]; // no empty string here
const TARGET_FIXED = "9"; // Target score locked per user request

// Data embedded from your CSV template (parsed & normalized)
// NOTE: Fixed a syntax error in the second entry's analysis string (removed stray leading ")
const TEMPLATE_DATA = [{"check":"FALSE","inspectionElement":"XML Sitemap - Pages","priority":"","issueCategory":"1- Accessibility","issueSubCategory":"Sitemaps","skillset":"Tech","score":"","targetScore":"9","analysis":"Full Client Name XML sitemap can be found at the following location: https://clientname.com/sitemap_index.xml  The sitemap index document pulls together the following sitemaps into a single reference:    https://clientname.com/page-sitemap.xml    https://clientname.com/post-sitemap.xml        The Client Name  sitemap is being properly generated by the Yoast SEO plugin.","recommendations":"Inspection element is performing properly on the Client Name Website. No changes necessary, continue to follow best practices.","implementer":""},{"check":"FALSE","inspectionElement":"XML Sitemap - News/Blog","priority":"","issueCategory":"1- Accessibility","issueSubCategory":"Sitemaps","skillset":"Tech","score":"","targetScore":"9","analysis":"The News/Blog XML Sitemap is not required  for Client Name due to the lack of news specific content. This sitemap file is only needed if a news section is relevant as the pages included here would be more likely to be indexed due to the sitemap being submitted to Google directly and the nature of news as 'timely'.\n\nHowever, if the sitemap is being generated they are helpful for crawlers to know when a site is updated regularly (when the last updates were made) and which pages are important for news related awareness and have the potential to earn external backlinks  ","recommendations":"Inspection element is performing properly on the Client Name Website. No changes necessary, continue to follow best practices.","implementer":""},{"check":"FALSE","inspectionElement":"Visible title tags per page (non-dynamic)","priority":"","issueCategory":"4- Content","issueSubCategory":"On-Page Content Markup","skillset":"Content","score":"","targetScore":"9","analysis":"Title tags are visible when inspecting the page source of the Client Name Website. Review notes in Search Console to determine if more pages should be indexed or if the meta tags are optimized, however, this inspection element does not cover any findings regarding SEO best practices and is just a check so it will not include this level of depth.","recommendations":"Required Deliverable for Implementation: On Page Recommendations","implementer":""},{"check":"FALSE","inspectionElement":"Visible meta description tags per page (non-dynamic)","priority":"","issueCategory":"4- Content","issueSubCategory":"On-Page Content Markup","skillset":"Content","score":"","targetScore":"9","analysis":"Meta description tags are visible when inspecting the page source of  the Client Name Website. Review notes in Search Console to determine if more pages  should be indexed or if the meta tags are optimized, however, this inspection element does not cover any findings regarding SEO best practices and is just a check so it will not include this level of depth.","recommendations":"Required Deliverable for Implementation: On Page Recommendations","implementer":""},{"check":"FALSE","inspectionElement":"Page Source META tags","priority":"","issueCategory":"4- Content","issueSubCategory":"On-Page Content Markup","skillset":"Content","score":"","targetScore":"9","analysis":"Meta tags are visible when inspecting the page source of the Client Name Website. Review notes in Search Console to determine if more pages should be indexed or if the meta tags are optimized, however, this inspection element does not cover any findings regarding SEO best practices and is just a check so it will not include this level of depth.","recommendations":"Required Deliverable for Implementation: On Page Recommendations","implementer":""},{"check":"FALSE","inspectionElement":"HTML Sitemap","priority":"","issueCategory":"1- Accessibility","issueSubCategory":"Sitemaps","skillset":"Tech","score":"","targetScore":"9","analysis":"HTML Sitemap is generated by Yoast SEO plugin and accessible at https://clientname.com/sitemap_index.xml\n\nWhile the sitemap for posts and pages is generated, the tags and categories are hidden from search engines.","recommendations":"Inspection element is performing properly on the Client Name Website. No changes necessary, continue to follow best practices.","implementer":""},{"check":"FALSE","inspectionElement":"Robots.txt (root) condition and best practices","priority":"","issueCategory":"1- Accessibility","issueSubCategory":"Robots.txt","skillset":"Tech","score":"","targetScore":"9","analysis":"Robots.txt is accessible at: https://clientname.com/robots.txt\n\nThe file contains only the following:   Sitemap: https://clientname.com/sitemap_index.xml\n\nAll requests from search engines are allowed by default.","recommendations":"Inspection element is performing properly on the Client Name Website. No changes necessary, continue to follow best practices.","implementer":""},{"check":"FALSE","inspectionElement":"Robots.txt (sub-domains) indexation and competition","priority":"","issueCategory":"1- Accessibility","issueSubCategory":"Robots.txt","skillset":"Tech","score":"","targetScore":"9","analysis":"Robots.txt (root) and subdomain indexation appears to be minimal, however, this is recommended to be more thoroughly evaluated as part of the q-automation pass with an analysis from an export on Search Console of the 'Uniques' page count.\n\nThis is where we would want to monitor any subdomain competing  with the main domain for indexation in Google (unless intentional and domain has authority).","recommendations":"Inspection element is performing properly on the Client Name Website. No changes necessary, continue to follow best practices.","implementer":""},{"check":"FALSE","inspectionElement":"Use of meta robots tag (X-Robots)","priority":"","issueCategory":"1- Accessibility","issueSubCategory":"X-Robots","skillset":"Tech","score":"","targetScore":"9","analysis":"The use of the x-robots tag (via header) is visible both in the  robots.txt file and via inspection of the header on a few pages. See Robots.txt root page for more details.\n\nThis is primarily used to hide the index of '/tags/', which is a reasonable choice for blogging sites or eCommerce sites where the index of a taxonomy will be hidden from public view and search crawlers.","recommendations":"Inspection element is performing properly on the Client Name Website. No changes necessary, continue to follow best practices.","implementer":""},{"check":"FALSE","inspectionElement":"Use of the rel=canonical tag","priority":"","issueCategory":"1- Accessibility","issueSubCategory":"Duplicate Content","skillset":"Tech","score":"","targetScore":"9","analysis":"Canonical tags are present on Client Name Website and appear to be  properly implemented with no issues detected via a preliminary scan of templates/pages on both desktop and mobile.","recommendations":"Inspection element is performing properly on the Client Name Website. No changes necessary, continue to follow best practices.","implementer":""},{"check":"FALSE","inspectionElement":"Use of splash or gateway pages","priority":"","issueCategory":"1- Accessibility","issueSubCategory":"Roadblock - Entry Pages","skillset":"Tech","score":"","targetScore":"9","analysis":"No splash or gateway pages were found on the Client Name Website during the inspection.","recommendations":"Inspection element is performing properly on the Client Name Website. No changes necessary, continue to follow best practices.","implementer":""}];

function sanitizeScore(val) {
  if (val === null || val === undefined) return "";
  const s = String(val).trim();
  if (s.toUpperCase() === "N/A") return "N/A";
  if (s === "") return "";
  const n = Number(s);
  if (!Number.isFinite(n)) return "";
  if (n < 1) return "1";
  if (n > 9) return "9";
  return String(Math.round(n));
}

function inferSeverity(score) {
  if (score === "" || score === "N/A") return 0;
  const n = Number(score);
  if (!Number.isFinite(n)) return 0;
  return 10 - n; // 9 => 1, 1 => 9
}

function csvEscape(val) {
  const s = (val ?? "").toString();
  if (/[,\n\"]/.test(s)) return '"' + s.replace(/"/g, '""') + '"';
  return s;
}

function downloadCSV(filename, rows) {
  const headers = [
    "X/√",
    "INSPECTION ELEMENT",
    "PRIORITY",
    "ISSUE CATEGORY",
    "ISSUE SUB-CATEGORY",
    "SKILLSET",
    "SCORE",
    "TARGET SCORE",
    "ANALYSIS",
    "RECOMMENDATIONS",
    "IMPLEMENTER"
  ];
  const lines = [headers.join(",")];
  for (const r of rows) {
    const line = [
      r.check ? "TRUE" : "FALSE",
      r.inspectionElement,
      r.priority || "",
      r.issueCategory,
      r.issueSubCategory,
      r.skillset,
      r.score || "",
      TARGET_FIXED, // lock to 9 on export
      r.analysis,
      r.recommendations,
      r.implementer || "",
    ].map(csvEscape).join(",");
    lines.push(line);
  }
  const blob = new Blob([lines.join("\n")], { type: "text/csv;charset=utf-8;" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
  a.click();
  setTimeout(() => URL.revokeObjectURL(url), 500);
}

// -----------------
// Simple Test Harness
// -----------------
function runTests() {
  const results = [];
  const pass = (name, msg = "") => results.push({ name, status: "pass", msg });
  const fail = (name, msg) => results.push({ name, status: "fail", msg });

  try {
    // Test 1: Template loads with expected length (> 5 rows)
    if (Array.isArray(TEMPLATE_DATA) && TEMPLATE_DATA.length > 5) pass("Template loads", `Rows: ${TEMPLATE_DATA.length}`);
    else fail("Template loads", "TEMPLATE_DATA missing or too few rows");

    // Test 2: No stray leading quote in News/Blog analysis
    const news = TEMPLATE_DATA.find(r => r.inspectionElement === "XML Sitemap - News/Blog");
    if (news) {
      if (typeof news.analysis === "string" && !news.analysis.startsWith('\"')) pass("Fix stray quote in News/Blog analysis");
      else fail("Fix stray quote in News/Blog analysis", `analysis starts with: ${String(news.analysis).slice(0,2)}`);
    } else {
      fail("Find News/Blog row", "Row not found");
    }

    // Test 3: sanitizeScore edge cases
    const cases = [
      { inp: "N/A", exp: "N/A" },
      { inp: "10", exp: "9" },
      { inp: "0", exp: "1" },
      { inp: "5.4", exp: "5" },
      { inp: "foo", exp: "" },
    ];
    let ok = true;
    for (const c of cases) {
      const got = sanitizeScore(c.inp);
      if (got !== c.exp) { ok = false; fail("sanitizeScore", `inp=${c.inp} exp=${c.exp} got=${got}`); }
    }
    if (ok) pass("sanitizeScore");

    // Test 4: inferSeverity mapping
    const sOK = inferSeverity("9") === 1 && inferSeverity("1") === 9 && inferSeverity("N/A") === 0;
    if (sOK) pass("inferSeverity"); else fail("inferSeverity", `got 9=>${inferSeverity("9")}, 1=>${inferSeverity("1")}, N/A=>${inferSeverity("N/A")}`);

    // Test 5 (updated): Implementation list should include N/A and exclude only 9
    const sample = [
      { score: "9", priority: "", inspectionElement: "A" },
      { score: "N/A", priority: "", inspectionElement: "B" },
      { score: "4", priority: "", inspectionElement: "C" },
      { score: "", priority: "", inspectionElement: "D" },
    ];
    const impl = sample.filter(r => r.score !== "9");
    if (impl.map(r=>r.inspectionElement).join("") === "BCD") pass("Implementation filter includes N/A & blanks"); else fail("Implementation filter includes N/A & blanks", impl.map(r=>r.inspectionElement).join(","));

    // Test 6: CSV header shape
    const headers = [
      "X/√","INSPECTION ELEMENT","PRIORITY","ISSUE CATEGORY","ISSUE SUB-CATEGORY","SKILLSET","SCORE","TARGET SCORE","ANALYSIS","RECOMMENDATIONS","IMPLEMENTER"
    ];
    const firstLine = headers.join(",");
    if (firstLine.includes("INSPECTION ELEMENT") && firstLine.split(",").length === 11) pass("CSV header shape"); else fail("CSV header shape", firstLine);

    // Test 7: No empty-string option in SCORE_OPTIONS
    if (!SCORE_OPTIONS.includes("")) pass("No empty score option"); else fail("No empty score option", JSON.stringify(SCORE_OPTIONS));

    // Test 8: Target score is fixed to 9
    if (TARGET_FIXED === "9") pass("Target fixed to 9"); else fail("Target fixed to 9", TARGET_FIXED);
  } catch (e) {
    fail("Runtime error in tests", String(e));
  }
  return results;
}

export default function TechSEOAnalysisTool() {
  const [data, setData] = useState(() => TEMPLATE_DATA.map((r, i) => ({ ...r, id: i+1, check: String(r.check).toLowerCase() === "true" ? true : false, targetScore: TARGET_FIXED })));
  const [q, setQ] = useState("");
  const [filterCat, setFilterCat] = useState("all");
  const testResults = useMemo(() => runTests(), []);

  // persist to localStorage
  useEffect(() => {
    try { localStorage.setItem("tsa.template.data", JSON.stringify(data)); } catch (e) {}
  }, [data]);

  useEffect(() => {
    try {
      const raw = localStorage.getItem("tsa.template.data");
      if (raw) setData(JSON.parse(raw));
    } catch (e) { /* ignore */ }
  }, []);

  const onChangeField = (id, key, value) => {
    setData((rows) => rows.map((r) => (r.id === id ? { ...r, [key]: value } : r)));
  };

  const filtered = useMemo(() => {
    let rows = data;
    if (filterCat !== "all") rows = rows.filter((r) => (r.issueCategory || "").toLowerCase() === filterCat.toLowerCase());
    if (q.trim()) {
      const n = q.trim().toLowerCase();
      rows = rows.filter((r) =>
        (r.inspectionElement || "").toLowerCase().includes(n) ||
        (r.analysis || "").toLowerCase().includes(n) ||
        (r.recommendations || "").toLowerCase().includes(n)
      );
    }
    return rows;
  }, [data, q, filterCat]);

  // Per your instruction, include N/A items in the implementation list; exclude only perfect 9s
  const implementationRows = useMemo(() => (
    data
      .filter((r) => r.score !== "9")
      .map((r) => ({ ...r, severity: inferSeverity(r.score) }))
      .sort((a,b) => (Number(a.priority||999) - Number(b.priority||999)) || b.severity - a.severity)
  ), [data]);

  const autoPrioritize = () => {
    const ranked = [...implementationRows]
      .sort((a,b) => b.severity - a.severity)
      .map((r, i) => ({ id: r.id, priority: String(i+1) }));
    setData((rows) => rows.map((r) => ({ ...r, priority: (ranked.find((x) => x.id===r.id)?.priority) || r.priority })));
  };

  const resetToTemplate = () => {
    setData(TEMPLATE_DATA.map((r, i) => ({ ...r, id: i+1, check: String(r.check).toLowerCase() === "true" ? true : false, targetScore: TARGET_FIXED })));
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="mx-auto max-w-7xl space-y-6">
        <motion.div initial={{ opacity: 0, y: -6 }} animate={{ opacity: 1, y: 0 }}>
          <h1 className="text-3xl font-semibold tracking-tight">Tech SEO Analysis Tool</h1>
          <p className="text-sm text-muted-foreground mt-1">Preloaded with the official template (all inspection elements). Edit inline, assign priorities/implementers, then export to CSV.</p>
        </motion.div>

        <Card className="shadow-sm">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg flex items-center gap-2"><RefreshCw className="h-5 w-5"/>Template dataset</CardTitle>
          </CardHeader>
          <CardContent className="flex flex-wrap items-center gap-3">
            <div className="flex items-center gap-2">
              <Label className="text-sm">Filter</Label>
              <Select value={filterCat} onValueChange={setFilterCat}>
                <SelectTrigger className="w-[240px]">
                  <SelectValue placeholder="Filter by category"/>
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All categories</SelectItem>
                  {ISSUE_CATEGORY_OPTIONS.map((c) => <SelectItem key={c} value={c}>{c}</SelectItem>)}
                </SelectContent>
              </Select>
            </div>
            <Input value={q} onChange={(e) => setQ(e.target.value)} placeholder="Search elements, analysis, recs…" className="w-[280px]"/>
            <div className="ml-auto flex gap-2">
              <Button variant="outline" onClick={() => downloadCSV("Technical_SEO_Analysis_Updated.csv", data)}><FileDown className="h-4 w-4 mr-2"/>Export CSV</Button>
              <Button variant="ghost" onClick={resetToTemplate}>Reset to template</Button>
            </div>
          </CardContent>
        </Card>

        <Tabs defaultValue="analysis" className="w-full">
          <TabsList className="grid grid-cols-3 w-full md:w-auto">
            <TabsTrigger value="analysis" className="flex items-center gap-2"><Filter className="h-4 w-4"/>Analysis</TabsTrigger>
            <TabsTrigger value="impl" className="flex items-center gap-2"><ListChecks className="h-4 w-4"/>Implementation checklist</TabsTrigger>
            <TabsTrigger value="tests" className="flex items-center gap-2"><CheckSquare className="h-4 w-4"/>Tests</TabsTrigger>
          </TabsList>

          <TabsContent value="analysis" className="mt-4">
            <Card className="shadow-sm">
              <CardContent className="overflow-x-auto">
                <div className="min-w-[1100px]">
                  <div className="grid grid-cols-12 text-xs font-medium text-muted-foreground px-2">
                    <div className="col-span-1 p-2">X/√</div>
                    <div className="col-span-2 p-2">Inspection element</div>
                    <div className="col-span-2 p-2">Issue category</div>
                    <div className="col-span-1 p-2">Sub-category</div>
                    <div className="col-span-1 p-2">Skillset</div>
                    <div className="col-span-1 p-2">Score</div>
                    <div className="col-span-1 p-2">Target</div>
                    <div className="col-span-1 p-2">Priority</div>
                    <div className="col-span-2 p-2">Implementer</div>
                  </div>
                  <div className="divide-y">
                    {filtered.map((r) => (
                      <div key={r.id} className="grid grid-cols-12 items-start px-2 py-3 hover:bg-gray-50">
                        <div className="col-span-1 p-2">
                          <Switch checked={!!r.check} onCheckedChange={(v) => onChangeField(r.id, "check", v)}/>
                        </div>
                        <div className="col-span-2 p-2">
                          <Input value={r.inspectionElement} onChange={(e) => onChangeField(r.id, "inspectionElement", e.target.value)}/>
                          <div className="mt-2 text-xs text-muted-foreground">Analysis</div>
                          <Textarea className="mt-1" value={r.analysis} onChange={(e) => onChangeField(r.id, "analysis", e.target.value)} rows={4}/>
                          <div className="mt-2 text-xs text-muted-foreground">Recommendations</div>
                          <Textarea className="mt-1" value={r.recommendations} onChange={(e) => onChangeField(r.id, "recommendations", e.target.value)} rows={4}/>
                        </div>
                        <div className="col-span-2 p-2">
                          <Select value={r.issueCategory || undefined} onValueChange={(v) => onChangeField(r.id, "issueCategory", v)}>
                            <SelectTrigger><SelectValue placeholder="Category"/></SelectTrigger>
                            <SelectContent>
                              {ISSUE_CATEGORY_OPTIONS.map((c) => <SelectItem key={c} value={c}>{c}</SelectItem>)}
                            </SelectContent>
                          </Select>
                        </div>
                        <div className="col-span-1 p-2">
                          <Input value={r.issueSubCategory} onChange={(e) => onChangeField(r.id, "issueSubCategory", e.target.value)}/>
                        </div>
                        <div className="col-span-1 p-2">
                          <Input value={r.skillset} onChange={(e) => onChangeField(r.id, "skillset", e.target.value)}/>
                        </div>
                        <div className="col-span-1 p-2">
                          <Select value={r.score || undefined} onValueChange={(v) => onChangeField(r.id, "score", v === "_clear" ? "" : sanitizeScore(v))}>
                            <SelectTrigger><SelectValue placeholder="Score"/></SelectTrigger>
                            <SelectContent>
                              <SelectItem value="_clear">(clear)</SelectItem>
                              {SCORE_OPTIONS.map((s) => <SelectItem key={s} value={s}>{s}</SelectItem>)}
                            </SelectContent>
                          </Select>
                        </div>
                        <div className="col-span-1 p-2">
                          {/* Target Score locked to 9 (read-only) */}
                          <div className="px-3 py-2 bg-gray-100 rounded-md text-sm">{TARGET_FIXED}</div>
                        </div>
                        <div className="col-span-1 p-2">
                          <Input value={r.priority || ""} onChange={(e) => onChangeField(r.id, "priority", e.target.value.replace(/[^0-9]/g,""))} placeholder="#"/>
                        </div>
                        <div className="col-span-2 p-2">
                          <Select value={r.implementer || undefined} onValueChange={(v) => onChangeField(r.id, "implementer", v)}>
                            <SelectTrigger><SelectValue placeholder="Select"/></SelectTrigger>
                            <SelectContent>
                              {IMPLEMENTER_OPTIONS.map((c) => <SelectItem key={c} value={c}>{c}</SelectItem>)}
                            </SelectContent>
                          </Select>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="impl" className="mt-4">
            <Card className="shadow-sm">
              <CardHeader className="pb-3">
                <div className="flex flex-col md:flex-row gap-3 md:items-center md:justify-between">
                  <div className="flex items-center gap-2">
                    <Button onClick={autoPrioritize}><CheckSquare className="h-4 w-4 mr-2"/>Auto-prioritize</Button>
                  </div>
                  <div className="flex gap-2">
                    <Button variant="outline" onClick={() => downloadCSV("Implementation_Checklist.csv", implementationRows)}><FileDown className="h-4 w-4 mr-2"/>Export checklist CSV</Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent className="overflow-x-auto">
                <div className="min-w-[1000px]">
                  <div className="grid grid-cols-10 text-xs font-medium text-muted-foreground px-2">
                    <div className="col-span-1 p-2">Priority</div>
                    <div className="col-span-2 p-2">Inspection element</div>
                    <div className="col-span-2 p-2">Issue category</div>
                    <div className="col-span-1 p-2">Implementer</div>
                    <div className="col-span-1 p-2">Score</div>
                    <div className="col-span-1 p-2">Severity</div>
                    <div className="col-span-2 p-2">Recommendations</div>
                  </div>
                  <div className="divide-y">
                    {implementationRows.map((r) => (
                      <div key={r.id} className="grid grid-cols-10 items-start px-2 py-3 hover:bg-gray-50">
                        <div className="col-span-1 p-2">
                          <Input value={r.priority || ""} onChange={(e) => onChangeField(r.id, "priority", e.target.value.replace(/[^0-9]/g,""))} placeholder="#"/>
                        </div>
                        <div className="col-span-2 p-2 text-sm">{r.inspectionElement}</div>
                        <div className="col-span-2 p-2 text-sm">{r.issueCategory}</div>
                        <div className="col-span-1 p-2">
                          <Select value={r.implementer || undefined} onValueChange={(v) => onChangeField(r.id, "implementer", v)}>
                            <SelectTrigger><SelectValue placeholder="Select"/></SelectTrigger>
                            <SelectContent>
                              {IMPLEMENTER_OPTIONS.map((c) => <SelectItem key={c} value={c}>{c}</SelectItem>)}
                            </SelectContent>
                          </Select>
                        </div>
                        <div className="col-span-1 p-2 text-sm">{r.score || ""}</div>
                        <div className="col-span-1 p-2 text-sm">{inferSeverity(r.score)}</div>
                        <div className="col-span-2 p-2">
                          <Textarea value={r.recommendations} onChange={(e) => onChangeField(r.id, "recommendations", e.target.value)} rows={4}/>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="tests" className="mt-4">
            <Card className="shadow-sm">
              <CardHeader className="pb-2">
                <CardTitle className="text-base">Runtime tests</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {testResults.map((t, idx) => (
                    <div key={idx} className={`text-sm ${t.status === 'pass' ? 'text-green-700' : 'text-red-700'}`}>
                      <span className="font-medium">{t.status.toUpperCase()}:</span> {t.name}{t.msg ? ` — ${t.msg}` : ""}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        <Card className="shadow-sm">
          <CardHeader className="pb-2">
            <CardTitle className="text-base">How this template-backed tool works</CardTitle>
          </CardHeader>
          <CardContent className="text-sm text-muted-foreground space-y-2">
            <ol className="list-decimal ml-5 space-y-1">
              <li>All inspection elements are preloaded from your template; no upload needed.</li>
              <li>Rewrite the Analysis and Recommendations per client; set a Score.</li>
              <li>Assign Priority and Implementer. X/√ can be used later for the dev checklist.</li>
              <li>Implementation checklist excludes only items with Score = 9 (includes N/A and blanks).</li>
              <li>Export to CSV for handoff or storage in your project folder. Target Score is locked to 9.</li>
            </ol>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
